#!/bin/bash

## Copyright (C) 2024 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

# shellcheck source=./sysmaint-session-shared
source /usr/libexec/user-sysmaint-split/sysmaint-session-shared

if [ "$PROFILE_SCRIPTS_WERE_SOURCED" != 'yes' ]; then
   source /etc/profile ## this pulls in /etc/profile.d as well
fi

export XDG_CURRENT_DESKTOP='sysmaint-session-wayland'
export QT_QPA_PLATFORMTHEME='lxqt'
export XDG_SESSION_TYPE='wayland'

window_manager_list=(
   '/usr/bin/labwc'
   # Add other window managers here later
)
window_manager_arg_list=(
  # Enabled merged config for labwc, needed for the keyboard layout to be
  # properly handled
  '-m'
)
selected_window_manager=''
for idx in "${!window_manager_list[@]}"; do
   if [ -e "${window_manager_list[idx]}" ]; then
     selected_window_manager="${window_manager_list[idx]}"
     selected_window_manager_args="${window_manager_arg_list[idx]}"
     break
   fi
done

sysmaint_app_list=(
   '/usr/bin/sysmaint-panel'
   '/usr/bin/x-terminal-emulator'
)
selected_sysmaint_app=''
for sysmaint_app in "${sysmaint_app_list[@]}"; do
   if [ -e "${sysmaint_app}" ]; then
      selected_sysmaint_app="${sysmaint_app}"
      break
   fi
done

system_tray_list=(
   '/usr/bin/waybar'
)
system_tray_arg_list=(
   ''
)

for (( idx = 0; idx < ${#system_tray_list[@]}; idx++ )); do
   if [ -e "${system_tray_list[idx]}" ]; then
      selected_system_tray="${system_tray_list[idx]}"
      selected_system_tray_args="${system_tray_arg_list[idx]}"
      break
   fi
done

if [ -z "${selected_window_manager}" ]; then
   printf "%s\n" "$0: ERROR: Could not find a supported window manager!" >&2
   exit 1;
fi
if [ -z "${selected_sysmaint_app}" ]; then
   printf "%s\n" "$0: ERROR: Could not find a supported sysmaint app!" >&2
   exit 1;
fi

dbus-update-activation-environment --systemd --all

write_sysmaint_account_specific_config_once

# shellcheck disable=SC2086
"${selected_window_manager}" ${selected_window_manager_args} &
window_manager_pid="$!"
## Needed to prevent window ordering and initialization problems
## WARNING: `sleep 1` IS NOT SUFFICIENT HERE. On machines with physical
## graphics hardware, the compositor takes more time than expected to
## initialize. Other applications will try to start before the Wayland
## compositor is fully initialized if `sleep 1` is used, crashing the
## compositor in the process.
##
## On an i5-13500H system, `sleep 2` was sufficient to allow the compositor to
## fully initialize before other applications were run. To allow some leeway
## for slower systems, `sleep 3` is what we use here for now.
sleep 3
export WAYLAND_DISPLAY=wayland-0
if [ "${selected_window_manager}" = '/usr/bin/labwc' ]; then
   ## Allows dynamically reloading labwc configuration
   export LABWC_PID="${window_manager_pid}"
fi

if [ -n "${selected_system_tray}" ]; then
   # shellcheck disable=SC2086
   "${selected_system_tray}" ${selected_system_tray_args} &
fi

"${selected_sysmaint_app}" &
sysmaint_app_pid="$!"

start_user_background_services

## Audio may start muted by default. Waybar provides no good way to unmute it,
## so let's unmute it for the user. If they want to mute the speakers, they
## can set the volume to 0%.
if command -v pactl &>/dev/null; then
   pactl set-sink-mute @DEFAULT_SINK@ false || true
fi

leaprun signal-wayland-session-started

wait "${sysmaint_app_pid}"
